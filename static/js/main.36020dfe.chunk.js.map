{"version":3,"sources":["App.js","array.js","index.js"],"names":["generateItems","length","Object","toConsumableArray","Array","keys","map","k","i","key","id","concat","text","opacity","actions","reverse","_ref","arr","items","slice","shuffle","_ref2","a","Math","random","sort","b","move","oldIndex","newIndex","_ref3","removeFrom","arguments","undefined","insertAt","isNaN","Number","_arr","item","splice","draggingItemId","state","_ref4","_this","setState","onDragStart","console","log","listRef","style","touchAction","onDragOver","findIndex","setListRef","el","_this2","this","react_default","createElement","className","droppable","onDrop","App_Draggable","swap","ref","App_ListItem","Component","Draggable","onTouchMove","e","touches","_e$touches$","clientX","clientY","target","transform","draggingOverElement","document","elementFromPoint","includes","_this3","props","draggable","onTouchStart","onTouchEnd","ListItem","selected","_this4","_this$props","children","ReactDOM","render","src_App_default","getElementById"],"mappings":"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","file":"static/js/main.36020dfe.chunk.js","sourcesContent":["import React, { Component, PureComponent } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport './App.css';\r\nimport { move, shuffle, reverse } from './array';\r\nimport { transform } from 'async';\r\n\r\nconst generateItems = length => [...Array(length).keys()].map((k,i) => ({\r\n  key:i,\r\n  id:`Item ${k}`,\r\n  text:`Item ${k}`,\r\n  opacity:1\r\n}));\r\n\r\nconst actions = {\r\n  reverse: ({items}) => ({items: reverse(items)}),\r\n  shuffle: ({items}) => ({items: shuffle(items)}),\r\n  move: (oldIndex, newIndex) => ({items}) => ({items: move(items, oldIndex, newIndex)}),\r\n}\r\n\r\nconst stopEvent = e => {\r\n  console.log('stoppingEvent',e.type, e.target);\r\n  // e.preventDefault();\r\n  // e.stopPropagation();\r\n}\r\n\r\nlet draggingItemId = 'Item 0';\r\nexport default class extends Component {\r\n\r\n  state = { \r\n    items: generateItems(8),\r\n  }\r\n  \r\n  move = ({oldIndex, newIndex}) => this.setState(actions.move(oldIndex, newIndex));\r\n  reverse = () => this.setState(actions.reverse);\r\n  shuffle = () => this.setState(actions.shuffle);\r\n  onDragStart = id => {\r\n    console.log('onDragStart', id, this.listRef.style);\r\n    this.listRef.style.touchAction='none';\r\n    draggingItemId = id;\r\n  }\r\n  onDragOver = id => {\r\n    console.log('onDragOver', id);\r\n    const oldIndex = this.state.items.findIndex(item => item.id === draggingItemId);\r\n    const newIndex = this.state.items.findIndex(item => item.id === id);\r\n    this.setState(actions.move(oldIndex, newIndex));\r\n    // draggingItemId = id;\r\n  }\r\n  setListRef = el => {\r\n    this.listRef = el;\r\n    console.log(this.listRef);\r\n  }\r\n  render() {\r\n    const { items } = this.state;\r\n    return (\r\n      <div className=\"App\"  droppable=\"true\"  onDragOver={this.onDragOver} onDrop={this.onDragOver} >\r\n        {/* <button onClick={this.reverse}>Reverse</button>\r\n        <button onClick={this.shuffle}>Shuffle</button> */}\r\n        <Draggable onDragStart={this.onDragStart} swap={this.swap} onDragOver={this.onDragOver}/>\r\n        <div className=\"list\" ref={this.setListRef}>\r\n          {/* <FlipMove enterAnimation=\"fade\" > */}\r\n            {items.map((item, i) => {\r\n              return <ListItem id={item.id} key={item.key} onDragStart={this.onDragStart}>{item.text}</ListItem>\r\n            })}\r\n          {/* </FlipMove> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass Draggable extends Component {\r\n  state = {id:0}\r\n  onTouchMove = e => {\r\n    console.log(\"onTouchMove\", e.touches);\r\n    const { clientX, clientY } = e.touches[0];\r\n    e.target.style.transform = `translateY(${clientY}px)`;\r\n    const draggingOverElement = document.elementFromPoint(clientX, clientY);\r\n    if (draggingOverElement.id.includes(\"Item\") && draggingItemId !== draggingOverElement.id) {\r\n      console.log(draggingOverElement);\r\n      this.props.onDragOver(draggingOverElement.id);\r\n    }\r\n\r\n  }\r\n  render() {\r\n    return <div \r\n        className=\"placeholder\" \r\n        draggable=\"true\" \r\n        onTouchMove={this.onTouchMove}  \r\n        onTouchStart={this.onTouchStart}\r\n        onTouchEnd={this.onTouchEnd}\r\n      />\r\n  }\r\n}\r\n\r\n// FlipMove requires class compoonents as children\r\nclass ListItem extends Component {\r\n  state = { selected: true };\r\n  onTouchStart = e => {\r\n    this.props.onDragStart(this.props.id);\r\n\r\n  }\r\n  render() {\r\n    const { children, id } = this.props;\r\n    return <div \r\n      onTouchStart={this.onTouchStart}\r\n      className={id===\"Item 0\" ? 'blank' : 'list-item' }\r\n      id={id}\r\n    > \r\n      {children}\r\n    </div>\r\n  }\r\n}\r\n","export const move = (arr, removeFrom=null, insertAt=null) => {\r\n    /*\r\n        Adds item if removeFrom is null\r\n        Removes item if insertAt is null\r\n    */\r\n    if (insertAt === removeFrom) return arr;\r\n    if (isNaN(Number(removeFrom) || isNaN(Number(insertAt)))) return arr;\r\n\r\n    let _arr = [...arr];\r\n\r\n    const item = (removeFrom !== null) ? _arr.splice(removeFrom, 1)[0] : null; \r\n    if (insertAt !== null) {\r\n        _arr.splice(insertAt, 0, item);\r\n    }\r\n\r\n    return _arr;\r\n  };\r\n    \r\nexport const shuffle = arr => arr\r\n    .map(a => [Math.random(), a])\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(a => a[1]);\r\n\r\nexport const reverse = arr => arr.slice().reverse();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}